digraph G {
  label = "Research in Virtual Machines for Dynamically-Typed Languages"
  labelloc = "t"
  node [shape = "box"]

  # Nodes
  pic [label = "SELF Polymorphic Inline Caches (1991)",
       tooltip = "Optimizing Dynamically-Typed Object-Oriented Languages With Polymorphic Inline Caches",
       URL = "http://bibliography.selflanguage.org/_static/pics.pdf"]
  mpic [label = "Truffle Dispatch Chains (Multidimensional Inline Caches) (2015)",
        tooltip = "Zero-Overhead Metaprogramming; Reflection and Metaobject Protocols Fast and without Compromises",
        URL = "https://stefan-marr.de/downloads/pldi15-marr-et-al-zero-overhead-metaprogramming.pdf"]

  om [label = "Object Representation", shape="oval"]
  maps [label = "SELF & Maps (OOPSLA'89)",
        tooltip = "An Efficient Implementation of SELF a Dynamically-Typed Object-Oriented Language Based on Prototypes",
        URL = "http://www.selflanguage.org/_static/published/implementation.pdf"]
  tosm [label = "Truffle Object Model (2014)",
        tooltip = "An Object Storage Model for the Truffle Language Implementation Framework",
        URL = "https://chrisseaton.com/rubytruffle/pppj14-om/pppj14-om.pdf"]
  tso [label = "Truffle Thread-Safe Object Model (2016)",
       tooltip = "Efficient and Thread-Safe Objects for Dynamically-Typed Languages",
       URL = "https://eregon.me/blog/assets/research/thread-safe-objects.pdf"]

  glsp [label = "Truffle Guest-Language Safepoints (2015)",
        tooltip = "Techniques and Applications for Guest-Language Safepoints",
        URL = "https://eregon.me/blog/assets/research/guest-language-safepoints.pdf"]

  freezing [label = "Type Freezing Maps (CGO 2020)",
            tooltip = "Type Freezing: Exploiting Attribute Type Monomorphism in Tracing JIT Compilers",
            URL = "https://doi.org/10.1145/3368826.3377907"]
  shapesAndBBV [label = "Shapes and Basic Block Versioning (ECOOP 2016)",
                tooltip = "Interprocedural Type Specialization of JavaScript Programs Without Type Analysis",
                URL = "https://drops.dagstuhl.de/opus/volltexte/2016/6101/pdf/LIPIcs-ECOOP-2016-7.pdf"]

  collections [label = "Collections Representation", shape="oval"]
  ss [label = "RPython Storage Strategies for Collections (2013)",
      tooltip = "Storage Strategies for Collections in Dynamically Typed Languages",
      URL = "https://tratt.net/laurie/research/pubs/html/bolz_diekmann_tratt__storage_strategies_for_collections_in_dynamically_typed_languages/"]
  tsc [label = "Truffle Thread-Safe Collections (2018)",
       tooltip = "Parallelization of Dynamic Languages: Synchronizing Built-in Collections",
       URL = "https://eregon.me/blog/assets/research/thread-safe-collections.pdf"]

  reachability [label = "Tracking Reachability to Reduce Synchronization", shape="oval"]
  domani [label = "Thread-Local Heaps and GC (2002)",
          tooltip = "Thread-Local Heaps for Java",
          URL = "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.5846&amp;rep=rep1&amp;type=pdf"]
  rarc [label = "Reachability for Dynamic Atomic Reference Counting (2017)",
        tooltip = "Dynamic Atomicity: Optimizing Swift Memory Management",
        URL = "https://dl.acm.org/doi/10.1145/3133841.3133843"]
  brc [label = "Biased Reference Counting (2018)",
       tooltip = "Biased Reference Counting: Minimizing Atomic Operations in Garbage Collection",
       URL = "https://iacoma.cs.uiuc.edu/iacoma-papers/pact18.pdf"]

  exe [label = "Execution Technique", shape="oval"]
  interp [label = "Interpretation", shape="oval"]
  compilation [label = "Compilation", shape="oval"]
  stackVsReg [label = "Stack vs. Register (VEE'05)",
       tooltip = "Virtual Machine Showdown: Stack Versus Registers",
       URL = "https://www.usenix.org/legacy/events%2Fvee05%2Ffull_papers/p153-yunhe.pdf"]
  topOfStack [label = "Top of Stack Caching (PLDI'95)",
       tooltip = "Stack Caching for Interpreters",
       URL = "http://www2.cs.arizona.edu/~collberg/Teaching/553/2011/Resources/ertl94sc.pdf"]
  directIndirect [label = "Impact of Direct/Indirect Threading ('03)",
       tooltip = "The Structure and Performance of Efficient Interpreters",
       URL = "https://www.jilp.org/vol5/v5paper12.pdf"]
  selfOptAst [label = "SelfOpt AST Interp. (DLS'12)",
       tooltip = "Self-Optimizing AST Interpreters",
       URL = "http://lafo.ssw.uni-linz.ac.at/papers/2012_DLS_SelfOptimizingASTInterpreters.pdf"]
  superInstructions [label = "Super Instructions (TOPLAS'05)",
       tooltip = "Optimizing Indirect Branch Prediction Accuracy in Virtual Machine Interpreters",
       URL = "https://www.scss.tcd.ie/David.Gregg/papers/toplas05.pdf"]
  quickening [label = "Bytecode Quickening (DLS'10)",
       tooltip = "Efficient Interpretation Using Quickening",
       URL = "https://publications.sba-research.org/publications/dls10.pdf"]

  inlineCaching [label = "Inline Caching (POPL'84)",
       tooltip = "Efficient Implementation of the Smalltalk-80 System",
       URL = "http://web.cs.ucla.edu/~palsberg/course/cs232/papers/DeutschSchiffman-popl84.pdf"]


  adaptiveJit [label = "Adaptive Compilation (JAVA'99)",
       tooltip = "The JalapeÃ±o Dynamic Optimizing Compiler for Java",
       URL = "https://pdfs.semanticscholar.org/8738/ba4b09cac68ad1ab7d036a6d5e40a17ee2c7.pdf"]

  regionBased [label = "Region-based JIT (PLDI'18)",
       tooltip = "HHVM JIT: A Profile-guided, Region-based Compiler for PHP and Hack",
       URL = "https://research.fb.com/wp-content/uploads/2018/04/hhvm-jit-a-profile-guided-region-based-compiler-for-php-and-hack.pdf"]
  traceBased [label = "Trace-based JIT (PLDI'00)",
       tooltip = "Dynamo: A Transparent Dynamic Optimization System",
       URL = "https://www.complang.tuwien.ac.at/andi/bala.pdf"]
  traceMonkey [label = "TraceMonkey (PLDI'09)",
       tooltip = "Trace-based Just-in-time Type Specialization for Dynamic Languages",
       URL = "http://dept.cs.williams.edu/~freund/cs434/gal-trace.pdf"]


  basicBlockVersioning [label = "Basic Block Versioning (ECOOP'15)",
       tooltip = "Simple and Effective Type Check Removal through Lazy Basic Block Versioning",
       URL = "https://drops.dagstuhl.de/opus/volltexte/2015/5219/pdf/9.pdf"]



metaTracing [label = "Meta Tracing Interpreters (ICOOOLPS'09)",
       tooltip = "Tracing the Meta-level: PyPy's Tracing JIT Compiler",
       URL = "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1023.9117&amp;rep=rep1&amp;type=pdf"]
partialEvaluation [label = "Partially Evaluating Interpreters (PLDI'17)",
       tooltip = "Practical Partial Evaluation for High-performance Dynamic Language Runtimes",
       URL = "https://chrisseaton.com/rubytruffle/pldi17-truffle/pldi17-truffle.pdf"]
MTvsPE [label = "Tracing vs. Partial Evaluation (OOPSLA'15)",
       tooltip = "Tracing vs. Partial Evaluation: Comparing Meta-Compilation Approaches for Self-Optimizing Interpreters",
       URL = "http://stefan-marr.de/downloads/oopsla15-marr-ducasse-meta-tracing-vs-partial-evaluation.pdf"]
optDeopt [label = "Optimized Deoptimization (PPPJ'14)",
       tooltip = "Speculation Without Regret: Reducing Deoptimization Meta-data in the Graal Compiler",
       URL = "http://www.ssw.uni-linz.ac.at/General/Staff/GD/PPPJ-2014-duboscq-29.pdf"]


  # Edges
  inlineCaching -> pic [label = "+ k-size cache"]
  pic -> mpic [label = "+ cache for metaprogramming accesses, etc"]
  mpic -> tso [label = "for efficient sharing"]

  om -> maps [label = "+ efficient access and lower memory footprint"]
  maps -> tosm [label = "+ unboxed values, final assumption, type specialization"]
  tosm -> tso [label = "+ thread safety"]
  tosm -> shapesAndBBV [label = "+ basic block versioning"]
  tosm -> freezing [label = "+ nested type freezing"]
  tso -> rarc
  rarc -> brc [label = "similar with bias towards a thread"]

  reachability -> domani
  domani -> tso

  tso -> tsc [label = "tracking reachability"]
  glsp -> tsc [label = "global synchronization"]
  collections -> ss [label = "+ adapt representation dynamically to unboxed values"]
  ss -> tsc [label = "+ thread safety"]

  exe -> inlineCaching [label = "lookup caching"]

  exe -> interp
  interp -> directIndirect
  interp -> stackVsReg
  interp -> topOfStack
  interp -> superInstructions
  interp -> selfOptAst
  interp -> quickening
  quickening -> selfOptAst [label = "+ AST interpreters"]
  exe -> compilation
  compilation -> maps [label = "method JIT"]
  compilation -> regionBased [label = "region JIT"]
  compilation -> traceBased [label = "trace JIT"]
  compilation -> basicBlockVersioning [label = "basic-block JIT"]
  basicBlockVersioning -> shapesAndBBV [label = "type propagation"]
  traceBased -> traceMonkey
  maps -> adaptiveJit [label = "+ adaptive compilation"]

  traceBased -> metaTracing [label = "+ reusable JIT"]
  traceMonkey -> metaTracing [label = "+ reusable JIT"]

  maps -> partialEvaluation [label = "+ method-based PE"]
  selfOptAst -> partialEvaluation [label = "+ compilation"]

  selfOptAst -> mpic

  metaTracing -> MTvsPE [label = "+ comparison"]
  partialEvaluation -> MTvsPE [label = "+ comparison"]

  maps -> optDeopt
  optDeopt -> partialEvaluation
}
